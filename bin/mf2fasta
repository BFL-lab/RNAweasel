#!/usr/bin/perl
#############################################################################
#                               mf2fasta                                    #
my $VERSION=                     "1.0"                                     ;#
#                                                                           #
#                        Copyright (C) 2004 OGMP                            #
#                 (Organelle Genome Megasequencing Program),                #
#                        Departement de Biochimie,                          #
#                         Universite de Montreal,                           #
#                    C.P. 6128, succursale Centre-ville,                    #
#                     Montreal, Quebec, Canada, H3C 2J7                     #
#                                                                           #
#                      Programming: David To                                #
#               Project management: Franz Lang                              #
#               E-Mail information: ogmp@bch.umontreal.ca                   #
#                                                                           #
#     This software is distributed under the GNU GENERAL PUBLIC LICENSE, as #
# published by the Free Software Foundation. A copy of version 2 of this    #
# license should be included in a file called COPYING. If not, write to the #
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.   #
#############################################################################
# This script formats a fasta file and sets the line lenth to be $MAXLINELENGTH

use File::Basename;
use Getopt::Std;
#use warnings;
use strict;

################################
# Setting up default variables #
################################
my $DEFAULTLINELENGTH = 60;
my $TRUE              = 1;
my $FALSE             = 0;
my $lineLength        = $DEFAULTLINELENGTH;
my $useNumbers        = $FALSE;

###################################
# Redirecting STDERR to /dev/null #
###################################
$| = 1;
open(STDERR, ">/dev/null");

################################################
# Get the options passed at the command prompt #
################################################
my %options=();
getopts("c:no:h", \%options);

#####################################################
# Check the default argument (the input fasta file) #
#####################################################
if(@ARGV != 1)
{
  my $len = @ARGV;
  Usage();
  die;
}
# All arguments are valid. Log program use in logfile
my ($LoG) = ($0 =~ m!([^/]+)$!);
my $USER = $ENV{'USER'};
system("echo `date +%y-%m-%d,%H:%M:%S` $USER $LoG >>/share/supported/apps/ogmp/log/ogmplog");

# Decide on the output location
if(defined($options{c}))
{
  $lineLength = $options{c};
}
if(defined($options{n}))
{
  $useNumbers = $TRUE;
}
if(defined($options{h}))
{
  Usage();
  die;
}
if(defined($options{o}))
{
  open (STDOUT, ">$options{o}") or die "Could not create output file\n";
}

# Open the inputfile
my $inputFile = shift @ARGV;
open (IN, $inputFile) or die "Could not find the input file: $inputFile\n";

my $remainder = 0;
my $position = 0;
my $key;

my $line;

my @sequences;
my @headers;
my $counter = -1;
my $printLen = 6;

while($line = <IN>)
{
  chomp($line);
  if($line =~ /^;.*/ or $line =~ /^$/)
  {
    next;
  }

  if($line =~ s/\s*(>.*)/$1/g)
  {
    push(@headers, $line);
    $counter++;
  }
  else
  {
    $line =~ tr/a-zA-Z\000-\100\133-\140\173-\277/A-ZA-Z/d;
    $sequences[$counter] .= $line;
  }
}
for(my $i=0; $i<=$counter; $i++)
{
  print STDOUT $headers[$i], "\n";	
  $remainder = length($sequences[$i]);
  while($remainder>0)
  {
    if($remainder < $lineLength)
    {
      $printLen = $remainder;
    }
    else
    {
      $printLen = $lineLength;
    }	
    my $printLine = substr($sequences[$i], $position, $printLen);
    if ($useNumbers)
    {
      print sprintf("%7i %s\n", ($position + 1), $printLine); 
    }
    else
    {
      print STDOUT $printLine, "\n";
    }
    $position += $printLen;
    $remainder -= $printLen;
  }
  $position = 0;
  $remainder = 0;
  print STDOUT "\n";
}
close IN;
close STDOUT;

sub Usage
{
  my $base = basename($0);
  print "\nUsage: $base [-n -c <num char/line> -o <outfile> -h] masterfile\n";
  print "All arguments are optional.\n";
  print "
 -n
    Print sequence position on each line
 -c integer
    Number of characters per line
 -o filename
    Send the output to file (default standard out)
 -h 
    Display the usage\n";
}

exit(1);
